// +build !

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequest":       schema_pkg_apis_atlassian_v1_CycleNodeRequest(ref),
		"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestSpec":   schema_pkg_apis_atlassian_v1_CycleNodeRequestSpec(ref),
		"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestStatus": schema_pkg_apis_atlassian_v1_CycleNodeRequestStatus(ref),
		"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeStatus":        schema_pkg_apis_atlassian_v1_CycleNodeStatus(ref),
		"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeStatusSpec":    schema_pkg_apis_atlassian_v1_CycleNodeStatusSpec(ref),
		"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeStatusStatus":  schema_pkg_apis_atlassian_v1_CycleNodeStatusStatus(ref),
		"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleSettings":          schema_pkg_apis_atlassian_v1_CycleSettings(ref),
		"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.NodeGroup":              schema_pkg_apis_atlassian_v1_NodeGroup(ref),
		"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.NodeGroupSpec":          schema_pkg_apis_atlassian_v1_NodeGroupSpec(ref),
		"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.NodeGroupStatus":        schema_pkg_apis_atlassian_v1_NodeGroupStatus(ref),
	}
}

func schema_pkg_apis_atlassian_v1_CycleNodeRequest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CycleNodeRequest is the Schema for the cyclenoderequests API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestSpec", "github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestStatus"},
	}
}

func schema_pkg_apis_atlassian_v1_CycleNodeRequestSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CycleNodeRequestSpec defines the desired state of CycleNodeRequest",
				Properties: map[string]spec.Schema{
					"nodeGroupName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeGroupName is the name of the node group in the cloud provider that will be increased to bring up replacement nodes.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector is the label selector used to select the nodes that are to be terminated",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
					"nodeNames": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeNames is an optional list of the names of nodes to rotate. This is used to only rotate specific nodes belonging to the NodeGroup, rather than every node in the group. If no node names are provided in NodeNames then the entire node group will be rotated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"cycleSettings": {
						SchemaProps: spec.SchemaProps{
							Description: "CycleSettings stores the settings to use for cycling the nodes.",
							Ref:         ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleSettings"),
						},
					},
				},
				Required: []string{"nodeGroupName", "selector", "cycleSettings"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector", "github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleSettings"},
	}
}

func schema_pkg_apis_atlassian_v1_CycleNodeRequestStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CycleNodeRequestStatus defines the observed state of CycleNodeRequest",
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase stores the current phase of the CycleNodeRequest",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about why the CycleNodeRequest is in this condition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"currentNodes": {
						SchemaProps: spec.SchemaProps{
							Description: "CurrentNodes stores the current nodes that are being \"worked on\". Used to batch operations against the node group in the cloud provider. Once a node is passed off to a CycleNodeStatus CRD, it is no longer listed here.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestNode"),
									},
								},
							},
						},
					},
					"nodesToTerminate": {
						SchemaProps: spec.SchemaProps{
							Description: "NodesToTerminate stores the old nodes that will be terminated. The cycling of nodes is considered successful when all of these nodes no longer exist in the cluster.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestNode"),
									},
								},
							},
						},
					},
					"scaleUpStarted": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleUpStarted stores the time when the scale up started This is used to track the time limit of the scale up. If we breach the time limit we fail the request.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"equilibriumWaitStarted": {
						SchemaProps: spec.SchemaProps{
							Description: "EquilibriumWaitStarted stores the time when we started waiting for equilibrium of Kube nodes and node group instances. This is used to give some leeway if we start a request at the same time as a cluster scaling event. If we breach the time limit we fail the request.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"activeChildren": {
						SchemaProps: spec.SchemaProps{
							Description: "ActiveChildren is the active number of CycleNodeStatuses that this CycleNodeRequest was aware of when it last checked for progress in the cycle operation.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"phase", "message"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time", "github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestNode"},
	}
}

func schema_pkg_apis_atlassian_v1_CycleNodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CycleNodeStatus is the Schema for the cyclenodestatus API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeStatusSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeStatusStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeStatusSpec", "github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeStatusStatus"},
	}
}

func schema_pkg_apis_atlassian_v1_CycleNodeStatusSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CycleNodeStatusSpec defines the desired state of CycleNodeStatus",
				Properties: map[string]spec.Schema{
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeName is the name of the node object in Kubernetes that will be drained and terminated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cycleSettings": {
						SchemaProps: spec.SchemaProps{
							Description: "CycleSettings stores the settings to use for cycling the node.",
							Ref:         ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleSettings"),
						},
					},
				},
				Required: []string{"nodeName", "cycleSettings"},
			},
		},
		Dependencies: []string{
			"github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleSettings"},
	}
}

func schema_pkg_apis_atlassian_v1_CycleNodeStatusStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CycleNodeStatusStatus defines the observed state of a node being cycled by a CycleNodeRequest",
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase stores the current phase of the CycleNodeStatus",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about why the CycleNodeStatus is in this condition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"currentNode": {
						SchemaProps: spec.SchemaProps{
							Description: "CurrentNode stores this node that is being \"worked on\"",
							Ref:         ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestNode"),
						},
					},
					"startedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "startedTimestamp stores the timestamp that work on this node began",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"phase", "message", "currentNode"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time", "github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleNodeRequestNode"},
	}
}

func schema_pkg_apis_atlassian_v1_CycleSettings(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CycleSettings are configuration options to control how nodes are cycled",
				Properties: map[string]spec.Schema{
					"method": {
						SchemaProps: spec.SchemaProps{
							Description: "Method describes the type of cycle operation to use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"concurrency": {
						SchemaProps: spec.SchemaProps{
							Description: "Concurrency is the number of nodes that one CycleNodeRequest will work on in parallel. Defaults to the size of the node group.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"labelsToRemove": {
						SchemaProps: spec.SchemaProps{
							Description: "LabelsToRemove is an array of labels to remove off of the pods running on the node This can be used to remove a pod from a service/endpoint before evicting/deleting it to prevent traffic being sent to it.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ignorePodsLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "IgnorePodLabels is a map of values for labels that describes which pods should be ignored when deciding whether a node has no more pods running. This map defines a union: any pod that matches any of the values for a given label name will be ignored.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type:   []string{"string"},
													Format: "",
												},
											},
										},
									},
								},
							},
						},
					},
					"ignoreNamespaces": {
						SchemaProps: spec.SchemaProps{
							Description: "IgnoreNamespaces is a list of namespace names in which running pods should be ignored when deciding whether a node has no more pods running.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"method"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_atlassian_v1_NodeGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeGroup is the Schema for the nodegroups API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.NodeGroupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.NodeGroupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.NodeGroupSpec", "github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.NodeGroupStatus"},
	}
}

func schema_pkg_apis_atlassian_v1_NodeGroupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeGroupSpec defines the desired state of NodeGroup",
				Properties: map[string]spec.Schema{
					"nodeGroupName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeGroupName is the name of the node group in the cloud provider that corresponds to this NodeGroup resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is the label selector used to select nodes that belong to this NodeGroup.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
					"cycleSettings": {
						SchemaProps: spec.SchemaProps{
							Description: "CycleSettings stores the settings to use for cycling the nodes.",
							Ref:         ref("github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleSettings"),
						},
					},
				},
				Required: []string{"nodeGroupName", "nodeSelector", "cycleSettings"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector", "github.com/atlassian-labs/cyclops/pkg/apis/atlassian/v1.CycleSettings"},
	}
}

func schema_pkg_apis_atlassian_v1_NodeGroupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeGroupStatus defines the observed state of NodeGroup",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}
